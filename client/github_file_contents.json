{
    "test": {
        "README.md": "# test\ntesting REST API\n",
        "folder1/anothertest.py": "print(\"hellow world\")",
        "test.py": "import requests\nimport json\nimport re\nimport os\n\ndef fetch_repo_file_contents(url, json_filename=\"github_repo_files.json\"):\n    # Extract owner and repo name from the URL\n    match = re.search(r\"github\\.com/([^/]+)/([^/]+)\", url)\n    if not match:\n        print(\"Invalid GitHub repository URL.\")\n        return\n    \n    owner, repo = match.groups()\n    api_url = f\"https://api.github.com/repos/{owner}/{repo}/contents\"\n\n    # Make API request to get file list\n    response = requests.get(api_url)\n\n    if response.status_code == 200:\n        files_data = response.json()\n\n        # Load existing JSON file if exists\n        if os.path.exists(json_filename):\n            with open(json_filename, \"r\") as json_file:\n                try:\n                    existing_data = json.load(json_file)\n                except json.JSONDecodeError:\n                    existing_data = {}\n        else:\n            existing_data = {}\n\n        # Fetch code for each file\n        repo_data = {}\n        for file in files_data:\n            if file[\"type\"] == \"file\" and file.get(\"download_url\"):\n                file_name = file[\"name\"]\n                file_url = file[\"download_url\"]\n\n                # Fetch the file content\n                file_response = requests.get(file_url)\n                if file_response.status_code == 200:\n                    repo_data[file_name] = file_response.text\n                else:\n                    repo_data[file_name] = \"Error fetching file\"\n\n        # Update JSON with repository code\n        existing_data[repo] = repo_data\n\n        # Save updated data\n        with open(json_filename, \"w\") as json_file:\n            json.dump(existing_data, json_file, indent=4)\n        \n        print(f\"File contents updated in {json_filename}\")\n\n    elif response.status_code == 404:\n        print(\"Repository or contents not found. Check the URL.\")\n    else:\n        print(f\"Failed to fetch repository contents. Status Code: {response.status_code}\")\n\n# Example usage\nrepo_url = input(\"Enter a GitHub repository URL: \")\nfetch_repo_file_contents(repo_url)\n"
    }
}